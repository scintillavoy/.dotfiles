#!/usr/bin/env bash

# ------------------------------------------------------------------------------
# Helpers
# ------------------------------------------------------------------------------

change_version() {
  local version=$1
  local change_version_path=$SCRIPT_DIR/change_version
  if [ -n "$CHANGE_VERSION_PATH" ]; then
    change_version_path=$CHANGE_VERSION_PATH
  elif [ -f "$PROJECT_ROOT_DIR/scripts/change_version" ]; then
    change_version_path=$PROJECT_ROOT_DIR/scripts/change_version
  fi
  if [ -f "$change_version_path" ]; then
    source "$change_version_path" "$version"
    git add --all
  else
    echo "Warning: cannot find a script to change version."
  fi
  git commit --allow-empty -m "Change version to $version"
}

check_local_changes() {
  if [ "$(git status --porcelain | wc -l)" -gt 0 ]; then
    echo "Error: There are local changes in the working tree:"
    git status --porcelain | sed -r "s|^(.*)$|\t\1|g"
    echo "Please commit your changes or stash them first."
    return 1
  fi
  return 0
}

# ------------------------------------------------------------------------------
# Start
# ------------------------------------------------------------------------------

start() {
  check_local_changes
  local return_value=$?
  if [ $return_value -ne 0 ]; then
    return $return_value
  fi

  git fetch "$REMOTE_NAME"
  if [ "$(git branch --remote --list "$REMOTE_NAME/$BRANCH_PREFIX/$TARGET_VERSION" | wc -l)" -gt 0 ]; then
    echo "Error: Branch $REMOTE_NAME/$BRANCH_PREFIX/$TARGET_VERSION already exists."
    echo "Aborted."
    return 1
  fi
  git checkout -B "$BRANCH_PREFIX/$TARGET_VERSION" "$REMOTE_NAME/$BASE_BRANCH"
  change_version "$TARGET_VERSION"
  git push -u "$REMOTE_NAME" "$BRANCH_PREFIX/$TARGET_VERSION"
  return 0
}

# ------------------------------------------------------------------------------
# Finish
# ------------------------------------------------------------------------------

check_merge_conflict() {
  local branch_name=$1
  local flag_name=$2
  if [ "$(git ls-files -u "$PROJECT_ROOT_DIR" | wc -l)" -gt 0 ]; then
    echo "Error: Merge conflict detected while merging into $branch_name."
    echo "Resolve conflicts and run $SCRIPT_PATH $TARGET_VERSION $DEVELOPMENT_VERSION $flag_name"
    return 1
  fi
  return 0
}

push_to_remote() {
  git push "$REMOTE_NAME" "$MAIN_BRANCH_NAME" "$DEVELOPMENT_BRANCH_NAME" "$BRANCH_PREFIX/$TARGET_VERSION" "v$TARGET_VERSION"
}

merge_into_main() {
  git checkout -B "$MAIN_BRANCH_NAME" "$REMOTE_NAME/$MAIN_BRANCH_NAME"
  git pull --ff-only
  git merge --no-ff --no-edit "$REMOTE_NAME/$BRANCH_PREFIX/$TARGET_VERSION"
  check_merge_conflict "$MAIN_BRANCH_NAME" "--continue-from-main"
  local return_value=$?
  if [ $return_value -ne 0 ]; then
    exit $return_value
  fi
}

merge_into_development() {
  git checkout -B "$BRANCH_PREFIX/$TARGET_VERSION" "$REMOTE_NAME/$BRANCH_PREFIX/$TARGET_VERSION"
  git pull --ff-only
  change_version "$DEVELOPMENT_VERSION"

  git checkout -B "$DEVELOPMENT_BRANCH_NAME" "$REMOTE_NAME/$DEVELOPMENT_BRANCH_NAME"
  git pull --ff-only
  git merge --no-ff --no-edit "$BRANCH_PREFIX/$TARGET_VERSION"
  check_merge_conflict "$DEVELOPMENT_BRANCH_NAME" "--continue-from-development"
  local return_value=$?
  if [ $return_value -ne 0 ]; then
    exit $return_value
  fi
}

finish() {
  if [ $# -gt 0 ]; then
    case $1 in
      "--continue-from-main")
        check_merge_conflict "$MAIN_BRANCH_NAME" "--continue-from-main"
        local return_value=$?
        if [ $return_value -ne 0 ]; then
          exit $return_value
        fi
        git commit --no-edit
        merge_into_development
        ;;
      "--continue-from-development")
        check_merge_conflict "$DEVELOPMENT_BRANCH_NAME" "--continue-from-development"
        local return_value=$?
        if [ $return_value -ne 0 ]; then
          exit $return_value
        fi
        git commit --no-edit
        ;;
      *)
        return 2
        ;;
    esac
    push_to_remote
    return 0
  fi

  check_local_changes
  local return_value=$?
  if [ $return_value -ne 0 ]; then
    return $return_value
  fi

  git fetch "$REMOTE_NAME"
  git tag -f "v$TARGET_VERSION" "$REMOTE_NAME/$BRANCH_PREFIX/$TARGET_VERSION"
  merge_into_main
  merge_into_development
  push_to_remote
  return 0
}
