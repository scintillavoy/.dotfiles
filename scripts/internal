#!/usr/bin/env bash

# ------------------------------------------------------------------------------
# Constants
# ------------------------------------------------------------------------------

RED="\033[0;31m"
ORANGE="\033[0;33m"
BLUE="\033[0;34m"
NO_COLOR="\033[0m"

# ------------------------------------------------------------------------------
# Functions for printing messages and confirmation
# ------------------------------------------------------------------------------

print_missing_argument_message() {
  printf "Error: '%s' requires a non-empty option argument.\n" "$1"
}

print_unknown_option_message() {
  printf "Error: Unknown option '%s'\n" "$1"
}

ask() {
  local prompt=$1
  while :; do
    read -p "$prompt [y/N]: " -r
    REPLY=${REPLY:-"n"}
    if [[ $REPLY =~ ^[Yy]$ ]]; then
      return 0
    elif [[ $REPLY =~ ^[Nn]$ ]]; then
      return 1
    fi
  done
}

# ------------------------------------------------------------------------------
# Functions for checking conditions
# - Functions in this section check whether conditions are satisfied or not.
# - If the check succeeds, it returns 0.
# - Otherwise, it returns some value other than 0.
# ------------------------------------------------------------------------------

check_local_changes() {
  [ "$(git status --porcelain | wc -l)" -eq 0 ] && return 0
  printf "%bError: There are local changes in the working tree:%b\n" "$RED" "$NO_COLOR"
  git status --porcelain | sed -r "s|^(.*)$|\t\1|g"
  printf "%bPlease commit your changes or stash them first.%b\n" "$RED" "$NO_COLOR"
  return 1
}

check_remote_branch_exists() {
  local branch_name=$1
  [ "$(git branch --remote --list "$branch_name" | wc -l)" -gt 0 ] && return 0
  printf "%bError: Remote branch %s does not exist.%b\n" "$RED" "$branch_name" "$NO_COLOR"
  printf "%bAborted.%b\n" "$RED" "$NO_COLOR"
  return 1
}

check_remote_branch_does_not_exist() {
  local branch_name=$1
  [ "$(git branch --remote --list "$branch_name" | wc -l)" -eq 0 ] && return 0
  printf "%bError: Remote branch %s already exists.%b\n" "$RED" "$branch_name" "$NO_COLOR"
  printf "%bAborted.%b\n" "$RED" "$NO_COLOR"
  return 1
}

check_remote_tag_does_not_exist() {
  local remote_name=$1
  local tag_name=$2
  [ "$(git ls-remote --tags "$remote_name" "$tag_name" | wc -l)" -eq 0 ] && return 0
  printf "%bError: Tag %s already exists in remote %s.%b\n" "$RED" "$tag_name" "$remote_name" "$NO_COLOR"
  printf "%bAborted.%b\n" "$RED" "$NO_COLOR"
  return 1
}

check_commit_exists() {
  local arg=$1
  [ "$(git rev-parse --verify "$arg^{commit}" 2>/dev/null | wc -l)" -gt 0 ] && return 0
  printf "%bError: %s cannot be dereferenced to a commit.%b\n" "$RED" "$arg" "$NO_COLOR"
  printf "%bAborted.%b\n" "$RED" "$NO_COLOR"
  return 1
}

check_merge_conflict() {
  local branch_name=$1
  local continue=$2
  [ "$(git ls-files -u "$PROJECT_ROOT_DIR" | wc -l)" -eq 0 ] && return 0
  printf "%bError: Merge conflict detected while merging into %s.%b\n" "$RED" "$branch_name" "$NO_COLOR"
  printf "%bResolve conflicts and run the script with '%s' option.%b\n" "$RED" "--continue-from-$continue" "$NO_COLOR"
  return 1
}

# ------------------------------------------------------------------------------
# Functions for Git operations
# ------------------------------------------------------------------------------

change_directory() {
  local directory=$1
  if ! cd "$directory"; then
    printf "%bError: Could not change the current directory to '%s'.%b\n" "$RED" "$directory" "$NO_COLOR"
    printf "%bPlease make sure the specified project root directory exists.%b\n" "$RED" "$NO_COLOR"
    return 1
  fi
  if [ -z "$(git rev-parse --show-toplevel 2>/dev/null)" ]; then
    printf "%bError: '%s' is not a git repository.%b\n" "$RED" "$(pwd)" "$NO_COLOR"
    printf "%bPlease make sure you are in a git repository%b\n" "$RED" "$NO_COLOR"
    printf "%bor the specified project root directory is a git repository.%b\n" "$RED" "$NO_COLOR"
    return 1
  fi
  return 0
}

change_version() {
  local version=$1
  local change_version_path=$SCRIPT_DIR/change_version
  if [ -n "$CHANGE_VERSION_PATH" ]; then
    change_version_path=$CHANGE_VERSION_PATH
  elif [ -f "$PROJECT_ROOT_DIR/scripts/change_version" ]; then
    change_version_path=$PROJECT_ROOT_DIR/scripts/change_version
  fi
  if [ -f "$change_version_path" ]; then
    source "$change_version_path" "$version"
    git add --all
  else
    printf "%bWarning: Could not find a script to change version.%b\n" "$ORANGE" "$NO_COLOR"
  fi
  git commit --allow-empty -m "Change version to $version"
}

merge_into_main() {
  git checkout -B "$MAIN_BRANCH_NAME" "$REMOTE_NAME/$MAIN_BRANCH_NAME"
  git pull --ff-only
  git merge --no-ff --no-edit "$REMOTE_NAME/$BRANCH_PREFIX$TARGET_VERSION"
  check_merge_conflict "$MAIN_BRANCH_NAME" "main"
  return $?
}

merge_into_development() {
  git checkout -B "$BRANCH_PREFIX$TARGET_VERSION" "$REMOTE_NAME/$BRANCH_PREFIX$TARGET_VERSION"
  git pull --ff-only
  change_version "$DEVELOPMENT_VERSION"

  git checkout -B "$DEVELOPMENT_BRANCH_NAME" "$REMOTE_NAME/$DEVELOPMENT_BRANCH_NAME"
  git pull --ff-only
  git merge --no-ff --no-edit "$BRANCH_PREFIX$TARGET_VERSION"
  check_merge_conflict "$DEVELOPMENT_BRANCH_NAME" "development"
  return $?
}

push_to_remote() {
  local arguments=("$@")
  if [ -n "$FORCE" ]; then
    arguments=("$FORCE" "${arguments[@]}")
  fi
  printf "%bPushing to %s...%b\n" "$BLUE" "$REMOTE_NAME" "$NO_COLOR"
  git push "${arguments[@]}"
}

# ------------------------------------------------------------------------------
# Start
# ------------------------------------------------------------------------------

start() {
  if [ -z "$ASSUME_YES" ]; then
    printf "Confirm the values before proceeding:\n"
    printf "  Script name:\t\t\t%s\n" "$SCRIPT_NAME"
    printf "  Target version:\t\t%s\n" "$TARGET_VERSION"
    printf "  Project root directory:\t%s\n" "$PROJECT_ROOT_DIR"
    printf "  Change version path:\t\t%s\n" "${CHANGE_VERSION_PATH:-"Not specified. The default path will be used."}"
    printf "  Remote name:\t\t\t%s\n" "$REMOTE_NAME"
    printf "  Branch prefix:\t\t%s\n" "$BRANCH_PREFIX"
    printf "  Tag prefix:\t\t\t%s\n" "$TAG_PREFIX"
    printf "  Start point:\t\t\t%s\n" "$START_POINT"
    [ -n "$FORCE" ] && printf "%b  ! Force push enabled.%b\n" "$ORANGE" "$NO_COLOR"
    ask "Proceed?" || return 0
  fi

  change_directory "$PROJECT_ROOT_DIR"
  local return_value=$?
  [ $return_value -ne 0 ] && return $return_value

  check_local_changes
  return_value=$?
  [ $return_value -ne 0 ] && return $return_value

  git fetch "$REMOTE_NAME"

  if [ -z "$FORCE" ]; then
    check_remote_tag_does_not_exist "$REMOTE_NAME" "$TAG_PREFIX$TARGET_VERSION"
    return_value=$?
    [ $return_value -ne 0 ] && return $return_value

    check_remote_branch_does_not_exist "$REMOTE_NAME/$BRANCH_PREFIX$TARGET_VERSION"
    return_value=$?
    [ $return_value -ne 0 ] && return $return_value
  fi

  check_commit_exists "$START_POINT"
  return_value=$?
  if [ $return_value -ne 0 ]; then
    printf "%bHint: The start point can be overridden by setting an option.%b\n" "$ORANGE" "$NO_COLOR"
    printf "%bHint: For example, try '%s --start-point <arg>'.%b\n" "$ORANGE" "$SCRIPT_NAME" "$NO_COLOR"
    printf "%bHint: <arg> may be given as a branch name, a commit-id, or a tag.%b\n" "$ORANGE" "$NO_COLOR"
    return $return_value
  fi

  git checkout -B "$BRANCH_PREFIX$TARGET_VERSION" "$START_POINT"
  change_version "$TARGET_VERSION"

  local push_arguments=(
    -u
    "$REMOTE_NAME"
    "$BRANCH_PREFIX$TARGET_VERSION"
  )
  push_to_remote "${push_arguments[@]}"
  return 0
}

# ------------------------------------------------------------------------------
# Finish
# ------------------------------------------------------------------------------

finish() {
  if [ -z "$ASSUME_YES" ]; then
    printf "Confirm the values before proceeding:\n"
    printf "  Script name:\t\t\t%s\n" "$SCRIPT_NAME"
    printf "  Target version:\t\t%s\n" "$TARGET_VERSION"
    printf "  Development version:\t\t%s\n" "$DEVELOPMENT_VERSION"
    printf "  Project root directory:\t%s\n" "$PROJECT_ROOT_DIR"
    printf "  Change version path:\t\t%s\n" "${CHANGE_VERSION_PATH:-"Not specified. The default path will be used."}"
    printf "  Remote name:\t\t\t%s\n" "$REMOTE_NAME"
    printf "  Branch prefix:\t\t%s\n" "$BRANCH_PREFIX"
    printf "  Tag prefix:\t\t\t%s\n" "$TAG_PREFIX"
    printf "  Main branch name:\t\t%s\n" "$MAIN_BRANCH_NAME"
    printf "  Development branch name:\t%s\n" "$DEVELOPMENT_BRANCH_NAME"
    [ -n "$CONTINUE" ] && printf "%b  ! Continue from merging into the %s branch.%b\n" "$ORANGE" "$CONTINUE" "$NO_COLOR"
    [ -n "$FORCE" ] && printf "%b  ! Force push enabled.%b\n" "$ORANGE" "$NO_COLOR"
    ask "Proceed?" || return 0
  fi

  change_directory "$PROJECT_ROOT_DIR"
  local return_value=$?
  [ $return_value -ne 0 ] && return $return_value

  if [ -z "$CONTINUE" ]; then
    check_local_changes
    return_value=$?
    [ $return_value -ne 0 ] && return $return_value
  fi

  git fetch "$REMOTE_NAME"

  if [ -z "$FORCE" ]; then
    check_remote_tag_does_not_exist "$REMOTE_NAME" "$TAG_PREFIX$TARGET_VERSION"
    return_value=$?
    [ $return_value -ne 0 ] && return $return_value
  fi

  check_remote_branch_exists "$REMOTE_NAME/$MAIN_BRANCH_NAME"
  return_value=$?
  if [ $return_value -ne 0 ]; then
    printf "%bHint: The name of the main branch can be overridden by setting an option.%b\n" "$ORANGE" "$NO_COLOR"
    printf "%bHint: For example, try '%s --main-branch-name <branch>'.%b\n" "$ORANGE" "$SCRIPT_NAME" "$NO_COLOR"
    return $return_value
  fi

  check_remote_branch_exists "$REMOTE_NAME/$DEVELOPMENT_BRANCH_NAME"
  return_value=$?
  if [ $return_value -ne 0 ]; then
    printf "%bHint: The name of the development branch can be overridden by setting an option.%b\n" "$ORANGE" "$NO_COLOR"
    printf "%bHint: For example, try '%s --development-branch-name <branch>'.%b\n" "$ORANGE" "$SCRIPT_NAME" "$NO_COLOR"
    return $return_value
  fi

  check_remote_branch_exists "$REMOTE_NAME/$BRANCH_PREFIX$TARGET_VERSION"
  return_value=$?
  [ $return_value -ne 0 ] && return $return_value

  local push_arguments=(
    "$REMOTE_NAME"
    "$MAIN_BRANCH_NAME"
    "$DEVELOPMENT_BRANCH_NAME"
    "$BRANCH_PREFIX$TARGET_VERSION"
    "$TAG_PREFIX$TARGET_VERSION"
  )

  if [ -n "$CONTINUE" ]; then
    case "$CONTINUE" in
      main)
        check_merge_conflict "$MAIN_BRANCH_NAME" "$CONTINUE"
        return_value=$?
        [ $return_value -ne 0 ] && return $return_value
        git commit --no-edit
        merge_into_development
        return_value=$?
        [ $return_value -ne 0 ] && return $return_value
        ;;
      development)
        check_merge_conflict "$DEVELOPMENT_BRANCH_NAME" "$CONTINUE"
        return_value=$?
        [ $return_value -ne 0 ] && return $return_value
        git commit --no-edit
        ;;
      *)
        return 1
    esac
    push_to_remote "${push_arguments[@]}"
    return 0
  fi

  git tag -f "$TAG_PREFIX$TARGET_VERSION" "$REMOTE_NAME/$BRANCH_PREFIX$TARGET_VERSION"

  merge_into_main
  return_value=$?
  [ $return_value -ne 0 ] && return $return_value

  merge_into_development
  return_value=$?
  [ $return_value -ne 0 ] && return $return_value

  push_to_remote "${push_arguments[@]}"
  return 0
}
